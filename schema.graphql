type SwapFactory @entity(immutable:false) {
  id: Bytes!
  pairCount: Int!
  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  txCount: BigInt!
}

type Token @entity(immutable: false) {
  id: Bytes!
  symbol: String!
  name: String!
  decimals: BigInt!
  derivedETH: BigDecimal!
}


type Pair @entity(immutable: false) {
  id: Bytes! # address

  token0: Token!
  token0Price: BigDecimal!
  token1: Token!
  token1Price: BigDecimal!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # statis
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  # calc by eth 
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!

  # past HourData
  #pairHourData: [PairHourData!]! @derivedFrom(field: "pair")

  pairDayData: [PairDayData!]! @derivedFrom(field: "pair")

  LiquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges

}

type PairHourData @entity {
  id: Bytes!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
  id: String!
  date: Int!
  pairAddress: Bytes!
  pair: Pair!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type User @entity {
  id: Bytes!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type LiquidityPosition @entity {
  id: String!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
}

# stores for USD calculations
type Bundle @entity {
  id: Bytes!
  ethPrice: BigDecimal! # price of ETH usd
}
